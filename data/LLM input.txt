帮我翻译如下Souffle规则到Ascent规则：
我会给你简单的例子
.decl isType(?t:Type)
.decl isReferenceType(?t:ReferenceType)
.decl isArrayType(?t:ArrayType)
.decl isClassType(?t:ClassType)
.decl isInterfaceType(?t:InterfaceType)
.decl DirectSuperclass(?class:ClassType, ?superclass:ClassType)


结果：

relation isType(String);
relation isReferenceType(String);
relation isArrayType(String);
relation isClassType(String);
relation isInterfaceType(String);
relation DirectSuperclass(String, String);

规则的例子：
isType(?class),
isReferenceType(?class),
isClassType(?class) :-
  _ClassType(?class).
结果：
isType(class) <--
  _ClassType(class);
isReferenceType(class) <--
_ClassType(class);
isClassType(class) <--
  _ClassType(class);

你需要处理的：
【你无需处理input 并且只需要处理规则片段中有的内容】

.decl _ClassType(?class:symbol)
.input _ClassType(IO="file", filename="ClassType.facts", delimiter="\t")
isType(?class),
isReferenceType(?class),
isClassType(?class) :-
  _ClassType(?class).

.decl _ArrayType(?arrayType:symbol)
.input _ArrayType(IO="file", filename="ArrayType.facts", delimiter="\t")
isType(?arrayType),
isReferenceType(?arrayType),
isArrayType(?arrayType) :-
  _ArrayType(?arrayType).


