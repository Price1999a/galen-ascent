帮我翻译如下Souffle规则到Ascent规则：
我会给你简单的例子，首先是decl怎么处理：
.decl isType(?t:Type)
.decl isReferenceType(?t:ReferenceType)
.decl isArrayType(?t:ArrayType)
.decl isClassType(?t:ClassType)
.decl isInterfaceType(?t:InterfaceType)
.decl DirectSuperclass(?class:ClassType, ?superclass:ClassType)


结果：

relation isType(String);
relation isReferenceType(String);
relation isArrayType(String);
relation isClassType(String);
relation isInterfaceType(String);
relation DirectSuperclass(String, String);

之后则是规则的例子：
isType(?type),
HeapAllocation_Type(?id, ?type) :-
  _NormalHeap(?id, ?type).
HeapAllocation_Type(?id, "java.lang.String") :-
  _StringConstant(?id).
Method_Descriptor(?method, ?descriptor) :-
  Method_ReturnType(?method, ?returnType),
  Method_Params(?method, ?params),
  ?descriptor = cat(?returnType, ?params).
结果：
isType(_type),
HeapAllocation_Type(id, _type) <--
  _NormalHeap(id, _type);
// 这里type是保留字 需要加_
HeapAllocation_Type(id, "java.lang.String".parse().unwrap()) <--
  _StringConstant(id);
// 这里ascent需要.parse().unwrap()来处理String
Method_Descriptor(method, descriptor) <--
  Method_ReturnType(method, returnType),
  Method_Params(method, params),
  let descriptor = format!("{}{}", returnType, params); // 'cat' is concatenation of strings

你需要处理的：
【你无需处理input 并且只需要处理规则片段中decl以及规则部分】
Reachable(?tomethod),
CallGraphEdge(?invocation, ?tomethod) :-
  Reachable(?inmethod),
  StaticMethodInvocation(?invocation, ?tomethod, ?inmethod).
Reachable(?tomethod),
CallGraphEdge(?invocation, ?tomethod),
VarPointsTo(?heap, ?this) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SpecialMethodInvocation_Base(?invocation, ?base),
  VarPointsTo(?heap, ?base),
  MethodInvocation_Method(?invocation, ?tomethod),
  ThisVar(?tomethod, ?this).
Reachable(?method) :-
  MainMethodDeclaration(?method).

